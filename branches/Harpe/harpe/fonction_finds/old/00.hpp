/*
 *  static enum {
            ERROR_TOTAL=0, //les erreur + et - se compensent
            ERROR_AA_CUMUL, //les erreur + et - se compensnt pas
            INTENSITEE_TOTAL_PARENT,//intensitée total des intensitées
            INTENSITEE_TOTAL, //intensitée totale qui est utilisée
            MASSE_TOTAL,//somme des masse des AA
            PERCENT_COUVERTURE,//MASSE_TOTAL /100 * MASSE_PARENT 
            //PERCENT_COUVERTURE_AA,//MASSE_TOTAL / masse moyenne AA
            NB_AA, //nombre de AA dans la chaine
            NB_PEAKS, //nombre de peaks dasn la chaine
            MASSE_PARENT, //masse du peptide
            PERCENT_INTENSITEE_UTILISEE,//INTENSITEE_TOTAL /100 * INTENSITEE_TOTAL_PARENT  
            VALUES_SIZE
        } enum_values;
*/
#include <math.h>

double calc_score(const double* const vals)
{
    return ((((((vals[2])+(((((((vals[3])+(vals[5]))/(1.12176))/(((vals[0])/(0.756971))-((0.718851)*(vals[9]))))+(((0.63537)*((0.184657)+(vals[1])))-((sin(vals[2]))*((vals[3])*(0.996021)))))*((sin(vals[2]))-((vals[1])+(0.135041))))-((0.000653576)*((2.54076)-((vals[0])/(vals[9]))))))/(sin(((0.837482)+((0.725023)+(vals[0])))+(((vals[8])+(vals[8]))+(sin(vals[7]))))))/(0.264286))-(((((vals[8])-(0.732209))-(((((vals[8])/(vals[4]))/((vals[5])/(sin(vals[3]))))/(vals[1]))+(vals[9])))/(sin(sin(vals[1]))))*(((0.127515)*((sin(sin(sin((((0.159603)/((vals[6])/(((2.1846)/(vals[9]))+((((0.354068)/(vals[0]))*((0.625712)+(vals[9])))*(((0.146179)*(vals[2]))+(0.442224))))))-((sin(vals[9]))/((vals[6])-(vals[9]))))*((4.92434)/(((0.522783)*(vals[6]))-(0.639481)))))))+(vals[6])))/(((vals[9])*(0.842119))-(0.78477)))))*((sin(sin(((((0.127515)*(vals[5]))+((0.295385)/((((0.81895)*(((0.871607)*(vals[8]))*(0.194574)))/(sin((vals[9])+(vals[8]))))/(vals[8]))))/((((0.919754)/((vals[9])*((0.830876)/(vals[3]))))-((((0.245504)/(vals[8]))/((vals[8])*(vals[6])))/(((((-0.277042)/((vals[8])/(vals[6])))*(0.154836))+(sin(((0.473265)*(vals[8]))+(sin(vals[6])))))-((0.64193)/(vals[8])))))-(((((((vals[2])*(vals[1]))*(sin(vals[9])))-(0.765166))-(((0.00599009)+((vals[6])-(vals[2])))*(((0.0755735)-(vals[1]))/((vals[4])-(vals[5])))))*(0.972224))*((0.375141)*(vals[8])))))-(((sin(vals[8]))/(sin(vals[1])))/(sin((0.906936)*(((0.296492)-(((0.0796488)/(((((sin(((vals[0])-(vals[0]))*((vals[2])/(vals[8]))))/(sin((((vals[3])+(0.429583))-((vals[1])+(0.857905)))-(sin((vals[0])/(0.306582))))))/(0.930385))*(((0.439967)/(sin(vals[6])))*(((vals[6])+(vals[2]))*((0.0382017)/(vals[3])))))-(sin(sin((sin(((vals[8])-(vals[3]))/((vals[4])*(vals[2]))))*(vals[5]))))))/(((sin((sin((0.640283)-((sin((0.989033)-((0.16897)*(sin((sin((vals[2])*(0.954979)))*(0.155865))))))/((((((((vals[8])*(vals[5]))*((((((0.934068)*(vals[7]))+(0.178796))-(((vals[8])/(vals[1]))+(0.735796)))+((((vals[2])-(0.513272))*((vals[2])-(0.52443)))*(0.704192)))*(((0.0307599)-((vals[4])+(0.782757)))/(((vals[1])/(0.580916))/((vals[9])*(0.97208))))))-(0.131326))-(((0.189849)*(((0.735759)*(vals[0]))-(0.344264)))-((sin(vals[9]))+((sin(sin(sin((sin(((((0.998215)/(vals[8]))-((vals[3])*(0.364566)))-(0.679114))*((((vals[4])+(vals[9]))-(0.168636))-(((vals[9])+(0.788959))+((vals[2])-(vals[8]))))))*(vals[2])))))+((((1.10187)/(vals[1]))*((0.703203)*((vals[9])/(vals[4]))))+(0.948951))))))/(vals[3]))/((vals[7])*((((0.560547)+((vals[1])-(vals[0])))-((0.277446)+((vals[6])*(0.281949))))*(0.0387919))))-((3.67607)/((vals[4])*(vals[3])))))))*(sin(sin((vals[0])*(1.57309))))))/((sin((((0.719728)*(((sin(vals[6]))+((vals[2])-(vals[8])))-((1.83051)-((vals[2])/(0.545358)))))-(0.492805))*(sin(((((vals[2])+(0.0239194))*(-0.162955))/(((vals[3])-(0.119686))-(0.614627)))/(0.922122)))))*(0.702946)))-(((((sin(((0.382175)*(sin(vals[1])))*(0.727582)))/(0.274314))-(((vals[5])-(0.260882))-((0.979688)-(vals[2]))))*((((sin((sin(((vals[5])/(0.565617))/((0.0576748)-(vals[3]))))*((((vals[0])/(0.774344))/((0.371801)-(vals[8])))-((vals[7])+((vals[4])/(0.478641))))))-(vals[3]))+(sin(sin(((0.458678)-(vals[2]))-(vals[1])))))-((((-0.844962)/(sin((vals[8])-(0.732209))))*(((vals[9])+(vals[4]))-(((((vals[4])-(vals[4]))+((vals[9])*(vals[1])))+(sin((0.953629)+(vals[3]))))*((vals[8])*((0.846432)/((0.816157)*(vals[5])))))))/(sin(vals[3])))))/((vals[9])/((vals[3])+((((vals[4])+(vals[3]))/((vals[5])+(sin(((((sin(vals[9]))-(((((((vals[1])*(0.309887))*((vals[3])*(0.421969)))-(sin((0.117584)-(vals[5]))))/(sin(((vals[2])-(vals[6]))*((0.361925)-(vals[8])))))*((((((0.514057)/((-0.449958)*((0.131897)-(vals[3]))))*(((vals[0])-(sin(vals[0])))/((sin(vals[7]))-((vals[4])*(0.581647)))))-(vals[6]))*((0.719507)+(vals[8])))-(((vals[8])-(0.232425))*((vals[6])-(0.74329)))))/(0.0108386)))*(((vals[7])-(vals[6]))+((0.774545)*(vals[0]))))/(sin(sin(vals[6]))))/(((sin(((vals[4])+(vals[6]))+(sin(vals[5]))))+((((0.908679)-(vals[0]))-((vals[8])*(0.240848)))+(vals[0])))*((0.801871)/(vals[1])))))))/(0.622066))))))))/(((0.664501)*((((vals[5])+(vals[9]))/((vals[5])/(0.4435)))/(0.481299)))-(((0.0826008)+(sin(vals[9])))-(((((vals[8])+(vals[4]))-((vals[6])/(vals[2])))*(((vals[7])-(0.839134))+((vals[7])/(vals[0]))))*((((vals[8])/(0.6412))*(sin(vals[7])))/(sin((vals[9])*(vals[6]))))))))))))))+(((vals[0])*(((vals[5])/(0.189093))*((((0.960234)/(vals[9]))-(sin(sin((0.117332)-(((vals[8])/(((0.892763)*((0.00934911)/(vals[8])))/(((vals[9])/((vals[9])+((vals[5])+(vals[0]))))/((((vals[1])*(vals[0]))*(0.307421))+(0.629195)))))+(vals[1]))))))*(0.131238))))+((vals[3])-((((sin(((vals[5])+(0.882539))/((0.211218)/(vals[3]))))+(sin(((0.197937)-(vals[7]))/(0.571344))))+(0.604335))+(vals[1]))))));
}
